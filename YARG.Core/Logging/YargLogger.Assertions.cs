//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System.Diagnostics;
using System.Runtime.CompilerServices;

namespace YARG.Core.Logging
{
    public static partial class YargLogger
    {
        [DebuggerStepThrough]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void AssertFormat<T1>(bool condition, string format, T1 item1, [CallerFilePath] string source = "", [CallerLineNumber] int line = -1, [CallerMemberName] string member = "")
        {
            if (!condition)
                FailFormat(format, item1, source, line, member);
        }

        [DebuggerStepThrough]
        public static void FailFormat<T1>(string format, T1 item1, [CallerFilePath] string source = "", [CallerLineNumber] int line = -1, [CallerMemberName] string member = "")
        {
            if (Debugger.IsAttached)
                Debugger.Break();

            var logItem = FormatLogItem.MakeItem(format, item1);
            AddLogItemToQueue(LogLevel.Failure, source, line, member, logItem);
        }

        [DebuggerStepThrough]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void AssertFormat<T1, T2>(bool condition, string format, T1 item1, T2 item2, [CallerFilePath] string source = "", [CallerLineNumber] int line = -1, [CallerMemberName] string member = "")
        {
            if (!condition)
                FailFormat(format, item1, item2, source, line, member);
        }

        [DebuggerStepThrough]
        public static void FailFormat<T1, T2>(string format, T1 item1, T2 item2, [CallerFilePath] string source = "", [CallerLineNumber] int line = -1, [CallerMemberName] string member = "")
        {
            if (Debugger.IsAttached)
                Debugger.Break();

            var logItem = FormatLogItem.MakeItem(format, item1, item2);
            AddLogItemToQueue(LogLevel.Failure, source, line, member, logItem);
        }

        [DebuggerStepThrough]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void AssertFormat<T1, T2, T3>(bool condition, string format, T1 item1, T2 item2, T3 item3, [CallerFilePath] string source = "", [CallerLineNumber] int line = -1, [CallerMemberName] string member = "")
        {
            if (!condition)
                FailFormat(format, item1, item2, item3, source, line, member);
        }

        [DebuggerStepThrough]
        public static void FailFormat<T1, T2, T3>(string format, T1 item1, T2 item2, T3 item3, [CallerFilePath] string source = "", [CallerLineNumber] int line = -1, [CallerMemberName] string member = "")
        {
            if (Debugger.IsAttached)
                Debugger.Break();

            var logItem = FormatLogItem.MakeItem(format, item1, item2, item3);
            AddLogItemToQueue(LogLevel.Failure, source, line, member, logItem);
        }

        [DebuggerStepThrough]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void AssertFormat<T1, T2, T3, T4>(bool condition, string format, T1 item1, T2 item2, T3 item3, T4 item4, [CallerFilePath] string source = "", [CallerLineNumber] int line = -1, [CallerMemberName] string member = "")
        {
            if (!condition)
                FailFormat(format, item1, item2, item3, item4, source, line, member);
        }

        [DebuggerStepThrough]
        public static void FailFormat<T1, T2, T3, T4>(string format, T1 item1, T2 item2, T3 item3, T4 item4, [CallerFilePath] string source = "", [CallerLineNumber] int line = -1, [CallerMemberName] string member = "")
        {
            if (Debugger.IsAttached)
                Debugger.Break();

            var logItem = FormatLogItem.MakeItem(format, item1, item2, item3, item4);
            AddLogItemToQueue(LogLevel.Failure, source, line, member, logItem);
        }

        [DebuggerStepThrough]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void AssertFormat<T1, T2, T3, T4, T5>(bool condition, string format, T1 item1, T2 item2, T3 item3, T4 item4, T5 item5, [CallerFilePath] string source = "", [CallerLineNumber] int line = -1, [CallerMemberName] string member = "")
        {
            if (!condition)
                FailFormat(format, item1, item2, item3, item4, item5, source, line, member);
        }

        [DebuggerStepThrough]
        public static void FailFormat<T1, T2, T3, T4, T5>(string format, T1 item1, T2 item2, T3 item3, T4 item4, T5 item5, [CallerFilePath] string source = "", [CallerLineNumber] int line = -1, [CallerMemberName] string member = "")
        {
            if (Debugger.IsAttached)
                Debugger.Break();

            var logItem = FormatLogItem.MakeItem(format, item1, item2, item3, item4, item5);
            AddLogItemToQueue(LogLevel.Failure, source, line, member, logItem);
        }

        [DebuggerStepThrough]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void AssertFormat<T1, T2, T3, T4, T5, T6>(bool condition, string format, T1 item1, T2 item2, T3 item3, T4 item4, T5 item5, T6 item6, [CallerFilePath] string source = "", [CallerLineNumber] int line = -1, [CallerMemberName] string member = "")
        {
            if (!condition)
                FailFormat(format, item1, item2, item3, item4, item5, item6, source, line, member);
        }

        [DebuggerStepThrough]
        public static void FailFormat<T1, T2, T3, T4, T5, T6>(string format, T1 item1, T2 item2, T3 item3, T4 item4, T5 item5, T6 item6, [CallerFilePath] string source = "", [CallerLineNumber] int line = -1, [CallerMemberName] string member = "")
        {
            if (Debugger.IsAttached)
                Debugger.Break();

            var logItem = FormatLogItem.MakeItem(format, item1, item2, item3, item4, item5, item6);
            AddLogItemToQueue(LogLevel.Failure, source, line, member, logItem);
        }

        [DebuggerStepThrough]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void AssertFormat<T1, T2, T3, T4, T5, T6, T7>(bool condition, string format, T1 item1, T2 item2, T3 item3, T4 item4, T5 item5, T6 item6, T7 item7, [CallerFilePath] string source = "", [CallerLineNumber] int line = -1, [CallerMemberName] string member = "")
        {
            if (!condition)
                FailFormat(format, item1, item2, item3, item4, item5, item6, item7, source, line, member);
        }

        [DebuggerStepThrough]
        public static void FailFormat<T1, T2, T3, T4, T5, T6, T7>(string format, T1 item1, T2 item2, T3 item3, T4 item4, T5 item5, T6 item6, T7 item7, [CallerFilePath] string source = "", [CallerLineNumber] int line = -1, [CallerMemberName] string member = "")
        {
            if (Debugger.IsAttached)
                Debugger.Break();

            var logItem = FormatLogItem.MakeItem(format, item1, item2, item3, item4, item5, item6, item7);
            AddLogItemToQueue(LogLevel.Failure, source, line, member, logItem);
        }

        [DebuggerStepThrough]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void AssertFormat<T1, T2, T3, T4, T5, T6, T7, T8>(bool condition, string format, T1 item1, T2 item2, T3 item3, T4 item4, T5 item5, T6 item6, T7 item7, T8 item8, [CallerFilePath] string source = "", [CallerLineNumber] int line = -1, [CallerMemberName] string member = "")
        {
            if (!condition)
                FailFormat(format, item1, item2, item3, item4, item5, item6, item7, item8, source, line, member);
        }

        [DebuggerStepThrough]
        public static void FailFormat<T1, T2, T3, T4, T5, T6, T7, T8>(string format, T1 item1, T2 item2, T3 item3, T4 item4, T5 item5, T6 item6, T7 item7, T8 item8, [CallerFilePath] string source = "", [CallerLineNumber] int line = -1, [CallerMemberName] string member = "")
        {
            if (Debugger.IsAttached)
                Debugger.Break();

            var logItem = FormatLogItem.MakeItem(format, item1, item2, item3, item4, item5, item6, item7, item8);
            AddLogItemToQueue(LogLevel.Failure, source, line, member, logItem);
        }

        [DebuggerStepThrough]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void AssertFormat<T1, T2, T3, T4, T5, T6, T7, T8, T9>(bool condition, string format, T1 item1, T2 item2, T3 item3, T4 item4, T5 item5, T6 item6, T7 item7, T8 item8, T9 item9, [CallerFilePath] string source = "", [CallerLineNumber] int line = -1, [CallerMemberName] string member = "")
        {
            if (!condition)
                FailFormat(format, item1, item2, item3, item4, item5, item6, item7, item8, item9, source, line, member);
        }

        [DebuggerStepThrough]
        public static void FailFormat<T1, T2, T3, T4, T5, T6, T7, T8, T9>(string format, T1 item1, T2 item2, T3 item3, T4 item4, T5 item5, T6 item6, T7 item7, T8 item8, T9 item9, [CallerFilePath] string source = "", [CallerLineNumber] int line = -1, [CallerMemberName] string member = "")
        {
            if (Debugger.IsAttached)
                Debugger.Break();

            var logItem = FormatLogItem.MakeItem(format, item1, item2, item3, item4, item5, item6, item7, item8, item9);
            AddLogItemToQueue(LogLevel.Failure, source, line, member, logItem);
        }

        [DebuggerStepThrough]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void AssertFormat<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(bool condition, string format, T1 item1, T2 item2, T3 item3, T4 item4, T5 item5, T6 item6, T7 item7, T8 item8, T9 item9, T10 item10, [CallerFilePath] string source = "", [CallerLineNumber] int line = -1, [CallerMemberName] string member = "")
        {
            if (!condition)
                FailFormat(format, item1, item2, item3, item4, item5, item6, item7, item8, item9, item10, source, line, member);
        }

        [DebuggerStepThrough]
        public static void FailFormat<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(string format, T1 item1, T2 item2, T3 item3, T4 item4, T5 item5, T6 item6, T7 item7, T8 item8, T9 item9, T10 item10, [CallerFilePath] string source = "", [CallerLineNumber] int line = -1, [CallerMemberName] string member = "")
        {
            if (Debugger.IsAttached)
                Debugger.Break();

            var logItem = FormatLogItem.MakeItem(format, item1, item2, item3, item4, item5, item6, item7, item8, item9, item10);
            AddLogItemToQueue(LogLevel.Failure, source, line, member, logItem);
        }

        [DebuggerStepThrough]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Assert(bool condition, string message, [CallerFilePath] string source = "", [CallerLineNumber] int line = -1, [CallerMemberName] string member = "")
        {
            if (!condition)
                Fail(message, source, line, member);
        }

        [DebuggerStepThrough]
        public static void Fail(string message, [CallerFilePath] string source = "", [CallerLineNumber] int line = -1, [CallerMemberName] string member = "")
        {
            if (Debugger.IsAttached)
                Debugger.Break();

            var logItem = MessageLogItem.MakeItem(message);
            AddLogItemToQueue(LogLevel.Failure, source, line, member, logItem);
        }
    }
}